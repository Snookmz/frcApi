WARNING: 2019/11/06 10:32:01 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/06 10:32:01 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/06 10:32:01 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/06 10:32:01 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/06 10:32:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/06 10:32:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"email":"heath@snoek.com.au","json":{"uuid":"","familyUuid":"","name":"Heath Snoek","email":"","uiPreferences":"","groupName":""}}
WARNING: 2019/11/06 11:34:46 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/06 11:34:46 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/06 11:34:46 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/06 11:34:46 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/06 11:34:46 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/06 11:34:46 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"user":"admin","password":"","json":{"User":"admin","password":""}}
TRACE: 2019/11/06 11:44:08 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/06 11:44:08 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/06 11:44:08 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
WARNING: 2019/11/06 11:44:08 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/06 11:44:08 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/06 11:44:08 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/06 11:44:08 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/06 11:44:08 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/06 11:44:08 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"user":"admin","password":"","json":{"User":"admin","password":""}}
TRACE: 2019/11/06 11:44:51 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/06 11:44:51 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/06 11:44:51 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
WARNING: 2019/11/06 11:44:51 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/06 11:44:51 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/06 11:44:51 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/06 11:44:51 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/06 11:44:51 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/06 11:44:51 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"user":"admin","password":"","json":{"User":"admin","password":""}}
TRACE: 2019/11/06 11:46:20 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/06 11:46:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/06 11:46:20 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
WARNING: 2019/11/06 11:46:20 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/06 11:46:20 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/06 11:46:20 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/06 11:46:20 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/06 11:46:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/06 11:46:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"user":"admin","password":"","json":{"User":"admin","password":""}}
TRACE: 2019/11/11 12:08:13 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/11 12:08:13 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/11 12:08:13 handler.(*Handler).NsAuthenticationMw: authorizationToken: [unit test authentication token]
TRACE: 2019/11/11 12:08:13 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/11 12:08:13 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/11 12:08:21 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/11 12:08:21 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/11 12:08:21 handler.(*Handler).NsAuthenticationMw: authorizationToken: [unit test authentication token]
TRACE: 2019/11/11 12:08:21 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/11 12:08:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/11 12:09:52 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/11 12:09:52 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/11 12:09:52 handler.(*Handler).NsAuthenticationMw: authorizationToken: unit test authentication token
TRACE: 2019/11/11 12:09:52 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/11 12:09:52 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 08:51:22 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 08:51:22 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 08:51:22 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
WARNING: 2019/11/12 08:51:22 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 08:51:22 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 08:51:22 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 08:51:22 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 08:51:22 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 08:51:22 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 08:51:22 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 08:51:22 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 08:51:22 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 08:51:22 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 08:51:22 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:25:44 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:25:44 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:25:44 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:25:44 handler.(*Handler).LoginHandler: h.LoginHandler
INFO: 2019/11/12 10:25:44 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: error converting post interface to PostContext","json":null}
WARNING: 2019/11/12 10:25:44 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:25:44 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:25:44 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:25:44 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:25:44 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:25:44 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:25:44 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:25:44 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:25:44 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:25:44 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:25:44 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:26:43 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:26:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:26:43 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:26:43 handler.(*Handler).LoginHandler: h.LoginHandler
INFO: 2019/11/12 10:26:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: error converting post interface to PostContext","json":null}
WARNING: 2019/11/12 10:26:43 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:26:43 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:26:43 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:26:43 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:26:43 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:26:43 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:26:43 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:26:43 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:26:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:26:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:26:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:27:03 handler.(*Handler).LoginHandler: h.LoginHandler
INFO: 2019/11/12 10:27:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: error converting post interface to PostContext","json":null}
TRACE: 2019/11/12 10:40:44 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:40:44 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:40:44 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:40:44 handler.(*Handler).LoginHandler: h.LoginHandler
INFO: 2019/11/12 10:40:44 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: error converting post interface to Post","json":null}
WARNING: 2019/11/12 10:40:44 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:40:45 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:40:45 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:40:45 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:40:45 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:40:45 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:40:45 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:40:45 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:40:45 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:40:45 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:40:45 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:44:37 handler.(*Handler).LoginHandler: h.LoginHandler
INFO: 2019/11/12 10:44:37 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: error converting post interface to Post","json":null}
TRACE: 2019/11/12 10:47:11 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":null}
INFO: 2019/11/12 10:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/12 10:48:50 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:48:50 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:48:50 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/12 10:48:50 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/12 10:49:11 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:49:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:49:11 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:49:11 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:49:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:49:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/12 10:49:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
WARNING: 2019/11/12 10:49:11 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:49:11 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:49:11 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:49:11 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:49:11 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:49:11 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:49:11 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:49:11 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:49:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:49:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:49:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:50:13 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:50:13 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:50:13 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:50:13 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/12 10:50:13 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/12 10:50:13 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/12 10:50:13 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
WARNING: 2019/11/12 10:50:13 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:50:13 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:50:13 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:50:13 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:50:13 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:50:13 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:50:13 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:50:13 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:50:13 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:13 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/12 10:50:32 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/12 10:50:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/12 10:50:32 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/12 10:50:32 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:50:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/12 10:50:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/12 10:50:33 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/12 10:50:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/12 10:50:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
WARNING: 2019/11/12 10:50:33 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/12 10:50:33 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/12 10:50:33 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/12 10:50:33 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/12 10:50:33 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/12 10:50:33 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
TRACE: 2019/11/12 10:50:33 handler.(*Handler).NsAuthenticationMw: authorizationToken: 'unit test authentication token'
TRACE: 2019/11/12 10:50:33 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/12 10:50:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/12 10:50:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/12 10:50:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/13 10:33:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/13 10:33:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/13 10:33:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/13 10:33:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/13 10:33:35 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/13 10:33:35 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/13 10:33:35 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/13 10:33:35 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/13 10:33:35 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:33:35 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
ERROR: 2019/11/13 10:33:35 handler.(*Handler).NsAuthenticationMw: error - no sessionId sent
INFO: 2019/11/13 10:33:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - no sessionId sent","json":null}
TRACE: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:33:35 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/13 10:40:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/13 10:40:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/13 10:40:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/13 10:40:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/13 10:40:15 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/13 10:40:15 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/13 10:40:15 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/13 10:40:15 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/13 10:40:15 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:40:15 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
ERROR: 2019/11/13 10:40:15 handler.(*Handler).NsAuthenticationMw: error - no sessionId sent
INFO: 2019/11/13 10:40:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - no sessionId sent","json":null}
TRACE: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:40:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/13 10:40:35 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:40:35 handler.(*Handler).NsAuthenticationMw: r: map[Authorization:[unit test authentication token]]
ERROR: 2019/11/13 10:40:35 handler.(*Handler).NsAuthenticationMw: error - no sessionId sent
INFO: 2019/11/13 10:40:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - no sessionId sent","json":null}
TRACE: 2019/11/13 10:41:35 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:41:35 handler.(*Handler).NsAuthenticationMw: r: {Reader:0xc000138780}
ERROR: 2019/11/13 10:41:35 handler.(*Handler).NsAuthenticationMw: error - no sessionId sent
INFO: 2019/11/13 10:41:35 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - no sessionId sent","json":null}
TRACE: 2019/11/13 10:48:06 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:48:06 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:48:06 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
WARNING: 2019/11/13 10:48:06 handler.(*Handler).NsAuthenticationMw: user not logged in
INFO: 2019/11/13 10:48:06 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"user not logged in","json":null}
TRACE: 2019/11/13 10:49:07 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:49:07 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:49:07 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/13 10:49:07 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/13 10:49:07 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/13 10:51:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/13 10:51:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/13 10:51:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/13 10:51:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/13 10:51:23 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/13 10:51:23 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/13 10:51:23 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/13 10:51:23 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/13 10:51:23 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/13 10:51:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/13 10:51:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/15 13:25:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/15 13:25:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
INFO: 2019/11/15 13:25:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/15 13:25:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/15 13:25:59 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/15 13:25:59 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/15 13:25:59 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/15 13:25:59 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/15 13:25:59 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/15 13:25:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/15 13:25:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:08:25 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/18 12:08:25 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/18 12:08:25 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/18 12:08:25 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/18 12:08:25 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/18 12:08:25 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/18 12:08:25 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/18 12:08:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:08:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:09:33 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:09:33 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:09:33 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:09:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:11:57 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:11:57 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:11:57 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:11:57 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:16:02 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:16:02 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:16:02 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:16:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:17:03 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:17:03 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:17:03 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:17:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:17:17 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/18 12:17:17 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/18 12:17:17 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/18 12:17:17 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/18 12:17:17 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/18 12:17:17 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/18 12:17:17 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/18 12:17:17 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:17:17 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:18:59 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: 
ERROR: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost: error returned from json.Unmarshal: unexpected end of JSON input
ERROR: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost: syntax error at byte offset 0
ERROR: 2019/11/18 12:18:59 handler.(*Handler).ReadBodyIntoPost: body: ""
ERROR: 2019/11/18 12:18:59 handler.(*Handler).CheckSessionHandler: error returned from ReadPostFromRequest: unexpected end of JSON input
INFO: 2019/11/18 12:18:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from ReadPostFromRequest: unexpected end of JSON input","json":null}
TRACE: 2019/11/18 12:20:08 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 12:20:08 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/18 12:20:08 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/18 12:20:08 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/18 13:18:34 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 13:18:34 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/18 13:18:34 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/18 13:18:34 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/18 13:18:34 handler.(*Handler).NotFoundHandler: Requested URL : /policy/list
WARNING: 2019/11/18 13:18:34 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2019/11/18 13:19:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 13:19:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/18 13:19:03 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/18 13:19:03 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/18 13:19:03 handler.(*Handler).NotFoundHandler: Requested URL : /policy/list
WARNING: 2019/11/18 13:19:03 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2019/11/18 13:19:27 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 13:19:27 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/18 13:19:27 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/18 13:19:27 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/18 13:19:46 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/18 13:19:46 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/18 13:19:46 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/18 13:19:46 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/19 10:17:04 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/19 10:17:04 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 10:17:04 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 10:17:04 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/19 10:17:04 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/19 10:17:04 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","creationTime":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":null,"dpi":null,"filters":null,"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/19 10:17:04 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/19 10:17:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:17:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/19 10:19:20 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/19 10:19:20 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 10:19:20 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 10:19:20 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/19 10:19:20 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/19 10:19:20 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","creationTime":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":null,"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/19 10:19:20 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/19 10:19:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:19:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/19 10:21:02 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/19 10:21:02 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 10:21:02 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 10:21:02 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/19 10:21:02 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/19 10:21:02 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","creationTime":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","inboundFilters":null,"outboundFilters":null,"inboundShapers":null,"outboundShapers":null,"firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/19 10:21:02 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/19 10:21:02 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 10:21:02 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Requested URL : /data
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2019/11/19 13:35:14 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/19 13:35:14 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/19 13:35:14 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/19 13:35:14 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","creationTime":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/19 13:35:14 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/19 13:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Requested URL : /data/get
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2019/11/19 13:36:01 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/19 13:36:01 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/19 13:36:01 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/19 13:36:01 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","creationTime":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/19 13:36:01 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/19 13:36:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:36:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
WARNING: 2019/11/19 13:38:48 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/19 13:38:48 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/19 13:38:48 handler.(*Handler).NotFoundHandler: Requested URL : /data
WARNING: 2019/11/19 13:38:48 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2019/11/19 13:39:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:39:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_flow","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/19 13:39:23 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/19 13:39:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - incorrect query format","json":null}
TRACE: 2019/11/19 13:39:58 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:39:58 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/19 13:39:58 handler.(*Handler).GetDataHandler: h.GetDataHandler
TRACE: 2019/11/19 13:41:07 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:41:07 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/19 13:41:07 handler.(*Handler).GetDataHandler: h.GetDataHandler
TRACE: 2019/11/19 13:42:18 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:42:18 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/19 13:42:18 handler.(*Handler).GetDataHandler: h.GetDataHandler
TRACE: 2019/11/19 13:42:45 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/19 13:42:45 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/19 13:42:45 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/19 13:42:45 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null},"status":""}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null},"status":""}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/20 09:01:09 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/20 09:01:09 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/20 09:01:09 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/20 09:01:09 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/20 09:01:09 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/20 09:01:09 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/20 09:01:09 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/20 09:01:09 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:01:09 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null},"status":""}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/20 09:03:32 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/20 09:03:32 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/20 09:03:32 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/20 09:03:32 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/20 09:03:32 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/20 09:03:32 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/20 09:03:32 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/20 09:03:32 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:03:32 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null},"status":""}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null},"status":""}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/20 09:21:15 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/20 09:21:15 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/20 09:21:15 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/20 09:21:15 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/20 09:21:15 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/20 09:21:15 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/20 09:21:15 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/20 09:21:15 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 09:21:15 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/11/20 13:02:33 handler.(*Handler).GetActivityHandler: query: {Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"status":""}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"status":""}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/20 13:02:33 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/20 13:02:33 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/20 13:02:33 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/20 13:02:33 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/20 13:02:33 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/20 13:02:33 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/20 13:02:33 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/20 13:02:33 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/20 13:02:33 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/11/21 13:43:43 handler.(*Handler).GetActivityHandler: query: {Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"status":""}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"status":""}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2019/11/21 13:43:43 handler.(*Handler).GetTopNHandler: query: {Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"targets":null,"volumes":null,"sum":"","error":""},"status":""}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/21 13:43:43 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/21 13:43:43 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/21 13:43:43 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/21 13:43:43 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/21 13:43:43 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/21 13:43:43 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/21 13:43:43 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/21 13:43:43 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/21 13:43:43 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/22 10:29:23 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/22 10:29:23 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/22 10:29:23 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/11/22 10:29:23 handler.(*Handler).GetTopClassesHandler: query: {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}
INFO: 2019/11/22 10:29:23 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"status":""}}
TRACE: 2019/11/25 13:37:00 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/25 13:37:00 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/25 13:37:00 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
ERROR: 2019/11/25 13:37:00 handler.(*Handler).GetActivityHandler: error returned from json.Unmarshal: json: cannot unmarshal object into Go value of type []nsc.Query
INFO: 2019/11/25 13:37:00 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error returned from json.Unmarshal: json: cannot unmarshal object into Go value of type []nsc.Query","json":null}
TRACE: 2019/11/25 13:37:41 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/25 13:37:41 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/25 13:37:41 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/11/25 13:37:41 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/25 13:37:41 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"status":""}]}
TRACE: 2019/11/25 13:44:38 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/25 13:44:38 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/25 13:44:38 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/11/25 13:44:38 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/25 13:44:38 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2019/11/26 09:35:14 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/26 09:35:14 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/26 09:35:14 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/11/26 09:35:14 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/26 09:35:14 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2019/11/28 09:33:53 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/11/28 09:33:53 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/11/28 09:33:53 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/11/28 09:33:53 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/11/28 09:33:53 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/11/28 09:33:53 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/11/28 09:33:53 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/11/28 09:33:53 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/11/28 09:33:53 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 09:33:53 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/11/28 14:10:22 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/11/28 14:10:22 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2019/11/28 14:10:22 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
INFO: 2019/11/28 14:10:22 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"prevClassId":0,"name":"class name #0","prevParentId":0,"parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":1,"prevClassId":0,"name":"class name #1","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":2,"prevClassId":0,"name":"class name #2","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":3,"prevClassId":0,"name":"class name #3","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":4,"prevClassId":0,"name":"class name #4","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":5,"prevClassId":0,"name":"class name #5","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":6,"prevClassId":0,"name":"class name #6","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":7,"prevClassId":0,"name":"class name #7","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":8,"prevClassId":0,"name":"class name #8","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0},{"nsId":0,"classId":9,"prevClassId":0,"name":"class name #9","prevParentId":0,"parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"inboundShaperId":0,"outboundShaperId":0,"precedence":0,"policyId":1,"mirror_type":0}],"dpi":null,"filters":[{"nsId":0,"policyId":1,"classId":0,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":1,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":2,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":3,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":4,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":5,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":6,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":7,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":8,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"nsId":0,"policyId":1,"classId":9,"filterId":0,"prevFilterId":0,"description":"","direction":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2019/12/03 14:07:12 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/12/03 14:07:12 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/12/03 14:07:12 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/12/03 14:07:12 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/12/03 14:07:12 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/12/03 14:07:12 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/12/03 14:07:12 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/12/03 14:07:12 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/12/03 14:07:12 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:07:12 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2019/12/03 14:11:05 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/12/03 14:11:05 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/12/03 14:11:05 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/12/03 14:11:05 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/12/03 14:11:05 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/12/03 14:11:05 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/12/03 14:11:05 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/12/03 14:11:05 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/12/03 14:11:05 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/03 14:11:05 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2019/12/04 10:45:56 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).HelpHandler: h.HelpHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2019/12/04 10:45:56 handler.(*Handler).LoginHandler: error - name and password required
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).LogoutHandler: LogoutHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2019/12/04 10:45:56 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2019/12/04 10:45:56 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2019/12/04 10:45:56 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2019/12/04 10:45:56 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2019/12/04 10:45:56 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"nsId":0,"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"nsId":0,"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2019/12/04 10:45:56 handler.(*Handler).PolicyListHandler: PolicyListHandler
INFO: 2019/12/04 10:45:56 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2019/12/04 10:45:56 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/01/20 11:30:59 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/01/20 11:30:59 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/01/20 11:30:59 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/01/20 11:30:59 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/01/20 11:30:59 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/01/20 11:30:59 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/01/20 11:30:59 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/01/20 11:30:59 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/01/20 11:30:59 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/20 11:30:59 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/01/24 13:47:11 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/01/24 13:47:11 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/01/24 13:47:11 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/01/24 13:47:11 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/01/24 13:47:11 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/01/24 13:47:11 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/01/24 13:47:11 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/01/24 13:47:11 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/01/24 13:47:11 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:47:11 handler.(*Handler).ReadBodyIntoPost: REQUEST: /system/network, body: {"sessionId":"","json":{"ip":"10.0.1.1","netmask":"255.255.255.0","gateway":"10.0.1.10","nameServer":"8.8.8.8"}}
INFO: 2020/01/24 13:47:11 handler.(*Handler).SystemNetworkHandler: SystemNetworkHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/01/24 13:48:20 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/01/24 13:48:20 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/01/24 13:48:20 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/01/24 13:48:20 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/01/24 13:48:20 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/01/24 13:48:20 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/01/24 13:48:20 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/01/24 13:48:20 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/01/24 13:48:20 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:20 handler.(*Handler).ReadBodyIntoPost: REQUEST: /system/network, body: {"sessionId":"","json":{"ip":"10.0.1.1","netmask":"255.255.255.0","gateway":"10.0.1.10","nameServer":"8.8.8.8"}}
INFO: 2020/01/24 13:48:24 handler.(*Handler).SystemNetworkHandler: SystemNetworkHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/01/24 13:48:47 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/01/24 13:48:47 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/01/24 13:48:47 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/01/24 13:48:47 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/01/24 13:48:47 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/01/24 13:48:47 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/01/24 13:48:47 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/01/24 13:48:47 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/01/24 13:48:47 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:48:47 handler.(*Handler).ReadBodyIntoPost: REQUEST: /system/network, body: {"sessionId":"","json":{"ip":"10.0.1.1","netmask":"255.255.255.0","gateway":"10.0.1.10","nameServer":"8.8.8.8"}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/01/24 13:52:19 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/01/24 13:52:19 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/01/24 13:52:19 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/01/24 13:52:19 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/01/24 13:52:19 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/01/24 13:52:19 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/01/24 13:52:19 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/01/24 13:52:19 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/01/24 13:52:19 handler.(*Handler).ReadBodyIntoPost: REQUEST: /system/network, body: {"sessionId":"","json":{"ip":"10.0.1.1","netmask":"255.255.255.0","gateway":"10.0.1.10","nameServer":"8.8.8.8"}}
INFO: 2020/01/24 13:52:19 handler.(*Handler).SystemNetworkHandler: SystemNetworkHandler
INFO: 2020/01/24 13:52:19 handler.(*Handler).SystemNetworkHandler: success, network settings changed {Ip:10.0.1.1 Netmask:255.255.255.0 Gateway:10.0.1.10 NameServer:8.8.8.8}
TRACE: 2020/01/24 13:52:19 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/07 11:37:03 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/07 11:37:03 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/07 11:37:03 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/07 11:37:03 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/07 11:37:03 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:37:03 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Requested URL : /system/network
WARNING: 2020/02/07 11:37:03 handler.(*Handler).NotFoundHandler: Authorization : []
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/07 11:41:48 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/07 11:41:48 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/07 11:41:48 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/07 11:41:48 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/07 11:41:48 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/07 11:41:48 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/07 11:41:48 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":""}}
INFO: 2020/02/07 11:41:48 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/07 11:41:48 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/07 11:41:48 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 11:41:48 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/07 14:37:04 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/07 14:37:04 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/07 14:37:04 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/07 14:37:04 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/07 14:37:04 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/07 14:37:04 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/07 14:37:04 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).NsAuthenticationMw: post: {SessionId:unit test session id Json:[110 117 108 108]}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":""}}
INFO: 2020/02/07 14:37:04 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/07 14:37:04 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/07 14:37:04 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/07 14:37:04 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/11 07:16:01 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/license/get, body: {"sessionId":"unit test session ID","json":null}
INFO: 2020/02/11 07:16:01 handler.(*Handler).GetLicenseHandler: GetLicense
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"validity":"","expiration-date":"","hardware-id":"","owner-name":"","classes":"","bandwidth":"","alerts":"","reports":"","shaping-enabled":"","error":""},"status":""}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/11 07:16:01 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/11 07:16:01 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/11 07:16:01 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/11 07:16:01 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/11 07:16:01 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/11 07:16:01 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).NsAuthenticationMw: post.SessionId: unit test session id
TRACE: 2020/02/11 07:16:01 handler.(*Handler).NsAuthenticationMw: post.Json: null
TRACE: 2020/02/11 07:16:01 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":"","settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""}}}
INFO: 2020/02/11 07:16:01 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).NssCommandHandler: Query: {Component: Action: Item: Command: Settings:{DiskAvailable: DiskSize: DiskUsed: SystemCommand: MemSize: SystemUptime: DebugMode:false SystemLoad: MemAvailable: ConfiguredType: ConfiguredAddress: ConfiguredNetmask: ConfiguredGateway: ConfiguredDns: RunningAddress: RunningGateway: RunningNetmask: RunningDns: BridgeSpeedDuplex: SmtpServer: SmtpUser: SmtpPassword: SmtpPort:0 SmtpEncryption: SenderAddress: TestMailRecipient: SendTestMail:false CaptureInterface: PacketDirectionDetection: GatewayDetect:0 GatewayMacs: LocalSubnets: NetflowPort:0 NetflowOffloadIp: NetflowOffloadPort:0 NetworkTopology: TzAustralia: TzEurope: TzAfrica: TzPacific: TzAntarctica: TzAmerica: TzIndian: TzRegion: TzAsia: TzAtlantic: Enabled:false Server0: Server1: Server2: Server3:}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"state":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/11 07:16:01 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/11 07:16:01 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 07:16:01 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/11 13:21:21 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/license/get, body: {"sessionId":"unit test session ID","json":null}
INFO: 2020/02/11 13:21:21 handler.(*Handler).GetLicenseHandler: GetLicense
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"validity":"","expiration-date":"","hardware-id":"","owner-name":"","classes":"","bandwidth":"","alerts":"","reports":"","shaping-enabled":"","error":""},"status":""}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/11 13:21:21 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/11 13:21:21 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/11 13:21:21 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/11 13:21:21 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/11 13:21:21 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/11 13:21:21 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).NsAuthenticationMw: post.SessionId: unit test session id
TRACE: 2020/02/11 13:21:21 handler.(*Handler).NsAuthenticationMw: post.Json: null
TRACE: 2020/02/11 13:21:21 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":"","settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""}}}
INFO: 2020/02/11 13:21:21 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).NssCommandHandler: Query: {Component: Action: Item: Command: Settings:{DiskAvailable: DiskSize: DiskUsed: SystemCommand: MemSize: SystemUptime: DebugMode:false SystemLoad: MemAvailable: ConfiguredType: ConfiguredAddress: ConfiguredNetmask: ConfiguredGateway: ConfiguredDns: RunningAddress: RunningGateway: RunningNetmask: RunningDns: BridgeSpeedDuplex: SmtpServer: SmtpUser: SmtpPassword: SmtpPort:0 SmtpEncryption: SenderAddress: TestMailRecipient: SendTestMail:false CaptureInterface: PacketDirectionDetection: GatewayDetect:0 GatewayMacs: LocalSubnets: NetflowPort:0 NetflowOffloadIp: NetflowOffloadPort:0 NetworkTopology: TzAustralia: TzEurope: TzAfrica: TzPacific: TzAntarctica: TzAmerica: TzIndian: TzRegion: TzAsia: TzAtlantic: Enabled:false Server0: Server1: Server2: Server3:}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"state":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/11 13:21:21 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/11 13:21:21 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/11 13:21:21 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/17 09:39:25 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/license/get, body: {"sessionId":"unit test session ID","json":null}
INFO: 2020/02/17 09:39:25 handler.(*Handler).GetLicenseHandler: GetLicense
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"validity":"","expiration-date":"","hardware-id":"","owner-name":"","classes":"","bandwidth":"","alerts":"","reports":"","shaping-enabled":"","error":""},"status":""}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/17 09:39:25 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/17 09:39:25 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/17 09:39:25 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/17 09:39:25 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/17 09:39:25 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/17 09:39:25 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).NsAuthenticationMw: post.SessionId: unit test session id
TRACE: 2020/02/17 09:39:25 handler.(*Handler).NsAuthenticationMw: post.Json: null
TRACE: 2020/02/17 09:39:25 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":"","settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""}}}
INFO: 2020/02/17 09:39:25 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).NssCommandHandler: Query: {Component: Action: Item: Command: Settings:{DiskAvailable: DiskSize: DiskUsed: SystemCommand: MemSize: SystemUptime: DebugMode:false SystemLoad: MemAvailable: ConfiguredType: ConfiguredAddress: ConfiguredNetmask: ConfiguredGateway: ConfiguredDns: RunningAddress: RunningGateway: RunningNetmask: RunningDns: BridgeSpeedDuplex: SmtpServer: SmtpUser: SmtpPassword: SmtpPort:0 SmtpEncryption: SenderAddress: TestMailRecipient: SendTestMail:false CaptureInterface: PacketDirectionDetection: GatewayDetect:0 GatewayMacs: LocalSubnets: NetflowPort:0 NetflowOffloadIp: NetflowOffloadPort:0 NetworkTopology: TzAustralia: TzEurope: TzAfrica: TzPacific: TzAntarctica: TzAmerica: TzIndian: TzRegion: TzAsia: TzAtlantic: Enabled:false Server0: Server1: Server2: Server3:}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"state":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/17 09:39:25 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/17 09:39:25 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/17 09:39:25 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/id, body: {"sessionId":"unit test session ID","json":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PolicyGetByPolicyIdHandler: h.PolicyGetPolicyByIdHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":0,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/check/session, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).CheckSessionHandler: h.CheckSessionHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"sessionId":"unit test session id","lastActive":"","signOnTime":"","signedIn":true,"ip":"","name":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/activity, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetActivityHandler: h.GetActivityHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetActivityHandler: query: [{Component: Action: Item:bandwidth_class Command: Parameters:{ClassId:0 Direction: Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data, body: {"sessionId":"unit test session ID","json":{"component":"","action":"","item":"bandwidth_class","command":"","parameters":{"class_id":0,"direction":"","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetDataHandler: h.GetDataHandler
INFO: 2020/02/18 12:05:40 handler.(*Handler).GetDataHandler: Query: {  bandwidth_class  {%!s(int=0)   %!s(int=0)    %!s(int=0) %!s(int=0)       }}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"data":null,"time":null,"error":""},"direction":"","status":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/license/get, body: {"sessionId":"unit test session ID","json":null}
INFO: 2020/02/18 12:05:40 handler.(*Handler).GetLicenseHandler: GetLicense
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"result":{"validity":"","expiration-date":"","hardware-id":"","owner-name":"","classes":"","bandwidth":"","alerts":"","reports":"","shaping-enabled":"","error":""},"status":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-classes, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}},{"component":"","action":"","item":"top_classes","command":"","parameters":{"class_id":0,"direction":"outbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetTopClassesHandler: h.GetTopClassesHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetTopClassesHandler: queries: [{Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}} {Component: Action: Item:top_classes Command: Parameters:{ClassId:0 Direction:outbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""},{"result":{"class_ids":null,"class_names":null,"volumes":null,"sum":""},"direction":"","status":""}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /data/top-n, body: {"sessionId":"unit test session ID","json":[{"component":"","action":"","item":"top_flows","command":"","parameters":{"class_id":0,"direction":"inbound","period":"","duration":0,"target":"","ip_src":"","ip_dst":"","pt_dst":0,"pt_src":0,"ip_prt":"","dscp":"","http_url":"","http_domain":"","dpi_protocol":"","domain_user":"","vlan_tag":""}}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetTopNHandler: h.GetTopNHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).GetTopNHandler: queries: [{Component: Action: Item:top_flows Command: Parameters:{ClassId:0 Direction:inbound Period: Duration:0 Target: IpSrc: IpDst: PortDst:0 PortSrc:0 IpProtocol: Dscp: HttpUrl: HttpDomain: DpiProtocol: DomainUser: VlanTag:}}]
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":[{"result":{"targets":null,"volumes":null,"sum":"","error":""},"direction":"","status":""}]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).HelpHandler: h.HelpHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"not implemented","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).HelpHandler: returning {Success:false Message:not implemented Json:[]}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":"unit test session id"}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).LoginHandler: h.LoginHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /login, body: {"sessionId":"","json":{"name":"","password":""}}
ERROR: 2020/02/18 12:05:40 handler.(*Handler).LoginHandler: error - name and password required
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":false,"message":"error - name and password required","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/logout, body: {"sessionId":"","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).LogoutHandler: LogoutHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"user is not logged out","json":null}
WARNING: 2020/02/18 12:05:40 handler.(*Handler).NotFoundHandler NotFoundHandler
WARNING: 2020/02/18 12:05:40 handler.(*Handler).NotFoundHandler: Request Method: POST
WARNING: 2020/02/18 12:05:40 handler.(*Handler).NotFoundHandler: Requested URL : /notfound
WARNING: 2020/02/18 12:05:40 handler.(*Handler).NotFoundHandler: Authorization : [bearer blah]
TRACE: 2020/02/18 12:05:40 handler.(*Handler).NsAuthenticationMw: NsAuthenticationMw URL: /policy/list
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"unit test session id","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).NsAuthenticationMw: post.SessionId: unit test session id
TRACE: 2020/02/18 12:05:40 handler.(*Handler).NsAuthenticationMw: post.Json: null
TRACE: 2020/02/18 12:05:40 handler.(*Handler).NsAuthenticationMw: complete, passing on to handler for URL: /policy/list
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"testHandler","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /nss, body: {"sessionId":"","json":{"component":"","action":"","item":"","command":"","settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""}}}
INFO: 2020/02/18 12:05:40 handler.(*Handler).NssCommandHandler: NssCommandHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).NssCommandHandler: Query: {Component: Action: Item: Command: Settings:{DiskAvailable: DiskSize: DiskUsed: SystemCommand: MemSize: SystemUptime: DebugMode:false SystemLoad: MemAvailable: ConfiguredType: ConfiguredAddress: ConfiguredNetmask: ConfiguredGateway: ConfiguredDns: RunningAddress: RunningGateway: RunningNetmask: RunningDns: BridgeSpeedDuplex: SmtpServer: SmtpUser: SmtpPassword: SmtpPort:0 SmtpEncryption: SenderAddress: TestMailRecipient: SendTestMail:false CaptureInterface: PacketDirectionDetection: GatewayDetect:0 GatewayMacs: LocalSubnets: NetflowPort:0 NetflowOffloadIp: NetflowOffloadPort:0 NetworkTopology: TzAustralia: TzEurope: TzAfrica: TzPacific: TzAntarctica: TzAmerica: TzIndian: TzRegion: TzAsia: TzAtlantic: Enabled:false Server0: Server1: Server2: Server3:}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"status":"","output":"","result":{"nsreporter":"","nsc":"","nsalerter":""},"settings":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"state":{"disk_available":"","disk_size":"","disk_used":"","system_command":"","mem_size":"","system_uptime":"","debug_mode":false,"system_load":"","mem_available":"","configured_type":"","configured_address":"","configured_netmask":"","configured_gateway":"","configured_dns":"","running_address":"","running_gateway":"","running_netmask":"","running_dns":"","bridge_speed_duplex":"","smtp_server":"","smtp_user":"","smtp_password":"","smtp_port":0,"smtp_encryption":"","sender_address":"","test_mail_recipient":"","send_test_mail":false,"capture_interface":"","capture_direction_detection":"","gateway_detect":0,"gateway_macs":"","local_subnets":"","netflow_port":0,"netflow_offload_ip":"","netflow_offload_port":0,"network_topology":"","tz_australia":"","tz_europe":"","tz_africa":"","tz_pacific":"","tz_antarctica":"","tz_america":"","tz_indian":"","tz_region":"","tz_asia":"","tz_atlantic":"","enabled":false,"server_0":"","server_1":"","server_2":"","server_3":""},"error":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/get/active, body: {"sessionId":"unit test session ID","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PolicyGetActiveHandler: h.PolicyGetActiveHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"policy":{"nsId":0,"policyId":1,"prevPolicyId":0,"policyName":"","createdBy":"","time":"","policySummary":"","activationDays":"","activationTime":"","shapingEnabled":false,"newPolicy":false,"changedPolicy":false,"deletedPolicy":false},"classes":[{"classId":0,"name":"class name #0","parentId":0,"shortName":"","firstChildId":0,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":1,"name":"class name #1","parentId":0,"shortName":"","firstChildId":-1,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":2,"name":"class name #2","parentId":0,"shortName":"","firstChildId":-2,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":3,"name":"class name #3","parentId":0,"shortName":"","firstChildId":-3,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":4,"name":"class name #4","parentId":0,"shortName":"","firstChildId":-4,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":5,"name":"class name #5","parentId":0,"shortName":"","firstChildId":-5,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":6,"name":"class name #6","parentId":0,"shortName":"","firstChildId":-6,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":7,"name":"class name #7","parentId":0,"shortName":"","firstChildId":-7,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":8,"name":"class name #8","parentId":0,"shortName":"","firstChildId":-8,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1},{"classId":9,"name":"class name #9","parentId":0,"shortName":"","firstChildId":-9,"lastChildId":0,"nextId":0,"prevId":0,"newClass":false,"changedClass":false,"deletedClass":false,"precedence":0,"policyId":1}],"dpi":null,"filters":[{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #0","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #1","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #2","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #3","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #4","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #5","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #6","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #7","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #8","newFilter":false,"changedFilter":false,"deletedFilter":false},{"policyId":1,"filterId":0,"protocol":"","srcIp":"","dstIp":"","srcPort":"","dstPort":"","dscp":0,"vlanTag":0,"httpDomain":"","domainUser":"","dpiProtocol":"dpi #9","newFilter":false,"changedFilter":false,"deletedFilter":false}],"shapers":null,"configShapers":null,"configFilters":null}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /policy/list, body: {"sessionId":"","json":{"name":"unit test name","password":"unit test password"}}
WARNING: 2020/02/18 12:05:40 handler.(*Handler).PolicyListHandler: PolicyListHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":null}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /family/info, body: {"sessionId":"unit test session id","json":{"User":"admin","password":""}}
TRACE: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost ReadBodyIntoPostContext
INFO: 2020/02/18 12:05:40 handler.(*Handler).ReadBodyIntoPost: REQUEST: /user/password/change, body: {"sessionId":"unit test session ID","json":{"name":"unit test name","oldPassword":"old password","newPassword":"new password"}}
INFO: 2020/02/18 12:05:40 handler.(*Handler).UserPasswordHandler: UserPasswordHandler
TRACE: 2020/02/18 12:05:40 handler.(*Handler).PrintOutput: RESPONSE: {"success":true,"message":"","json":{"id":""}}
